// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  RESTAURANT_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts             Account[]
  sessions             Session[]
  ownedRestaurants     Restaurant[]
  orders               Order[]
  notificationChannels NotificationChannel[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  categories           Category[]
  menuItems            MenuItem[]
  orders               Order[]
  notificationChannels NotificationChannel[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  menuItems MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
}

model Order {
  id         String      @id @default(cuid())
  status     OrderStatus @default(PENDING)
  total      Float
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  orderItems OrderItem[]
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model NotificationChannel {
  id        String   @id @default(cuid())
  type      String   // "LINE"
  token     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}